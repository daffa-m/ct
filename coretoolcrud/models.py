from django.db import models
from django.utils import timezone
from django.contrib.postgres.fields import JSONField
from datetime import date



# Create your models here.

class User(models.Model):
    user_username = models.TextField()
    user_password = models.TextField()
    user_role = models.TextField()
    user_company = models.TextField()
    user_islogin = models.BooleanField()


class Xbarr(models.Model):
    xbarr_survey_id = models.IntegerField()
    xbarr_nkaryawan = models.IntegerField()
    xbarr_npart = models.IntegerField()
    xbarr_ntrial = models.IntegerField()
    xbarr_stdev = models.FloatField(null=True)
    xbarr_stdevmax = models.FloatField(null=True)
    xbarr_stdevmin = models.FloatField(null=True)
    xbarr_karyawan = models.JSONField(null=True)
    xbarr_all = models.JSONField(null=True)
    xbarr_resume = models.JSONField(null=True)
    xbarr_psvc = models.TextField(null=True)
    xbarr_rva = models.TextField(null=True)
    xbarr_xva = models.TextField(null=True)
    xbarr_dbs = models.TextField(null=True)
    xbarr_dba = models.TextField(null=True)
    xbarr_aabp = models.TextField(null=True)
    xbarr_recommendation = models.JSONField(null=True)


class Cross(models.Model):
    cross_survey_id = models.IntegerField()
    cross_nkaryawan = models.IntegerField()
    cross_npart = models.IntegerField()
    cross_ntrial = models.IntegerField()
    cross_stdev = models.FloatField()
    cross_stdevmax = models.FloatField()
    cross_stdevmin = models.FloatField()
    cross_karyawan = models.JSONField(null=True)
    cross_all = models.JSONField(null=True)
    cross_resume = models.JSONField(null=True)
    cross_psvc = models.TextField(null=True)
    cross_rva = models.TextField(null=True)
    cross_xva = models.TextField(null=True)
    cross_dbs = models.TextField(null=True)
    cross_dba = models.TextField(null=True)
    cross_aabp = models.TextField(null=True)
    cross_recommendation = models.JSONField(null=True)

class Nested(models.Model):
    nested_survey_id = models.IntegerField()
    nested_nkaryawan = models.IntegerField()
    nested_npart = models.IntegerField()
    nested_ntrial = models.IntegerField()
    nested_stdev = models.FloatField()
    nested_stdevmax = models.FloatField()
    nested_stdevmin = models.FloatField()
    nested_karyawan = models.JSONField(null=True)
    nested_all = models.JSONField(null=True)
    nested_resume = models.JSONField(null=True)
    nested_psvc = models.TextField(null=True)
    nested_rva = models.TextField(null=True)
    nested_xva = models.TextField(null=True)
    nested_dbs = models.TextField(null=True)
    nested_dba = models.TextField(null=True)
    nested_aabp = models.TextField(null=True)
    nested_recommendation = models.JSONField(null=True)

class Linearity(models.Model):
    linearity_survey_id = models.IntegerField()
    linearity_npart = models.IntegerField()
    linearity_nmeasurement = models.IntegerField()
    linearity_confidence = models.FloatField()
    linearity_working_max = models.FloatField()
    linearity_working_min = models.FloatField()
    linearity_ref = models.TextField()
    linearity_master = models.JSONField(null=True)
    linearity_average = models.JSONField(null=True)
    linearity_all = models.JSONField(null=True)
    linearity_biasref = models.TextField(null=True)
    linearity_recommendation = models.TextField(null=True)
    linearity_ave_sn = models.TextField(null=True)
    linearity_ave_res = models.TextField(null=True)
    linearity_ave_measured = models.TextField(null=True)
    linearity_reviewed = models.TextField()
    linearity_measured = models.TextField()

class Vxbarr(models.Model):
    vxbarr_survey_id = models.IntegerField()
    vxbarr_lsl = models.IntegerField()
    vxbarr_usl = models.IntegerField()
    vxbarr_subgroup = models.IntegerField()
    vxbarr_unit = models.TextField()
    vxbarr_all = models.JSONField(null=True)
    vxbarr_measured = models.TextField()
    vxbarr_reviewed = models.TextField()
    vxbarr_stability = models.TextField(null=True)
    vxbarr_capability = models.TextField(null=True)
    vxbarr_reason = models.TextField(null=True)

class Sbarr(models.Model):
    sbarr_survey_id = models.IntegerField()
    sbarr_lsl = models.IntegerField()
    sbarr_usl = models.IntegerField()
    sbarr_subgroup = models.IntegerField()
    sbarr_unit = models.TextField()
    sbarr_all = models.JSONField(null=True)
    sbarr_measured = models.TextField()
    sbarr_reviewed = models.TextField()
    sbarr_stability = models.TextField(null=True)
    sbarr_capability = models.TextField(null=True)
    sbarr_reason = models.TextField(null=True)

class Imr(models.Model):
    imr_survey_id = models.IntegerField()
    imr_lsl = models.IntegerField()
    imr_usl = models.IntegerField()
    imr_subgroup = models.IntegerField()
    imr_all = models.JSONField(null=True)
    imr_measured = models.TextField()
    imr_reviewed = models.TextField()
    imr_stability = models.TextField(null=True)
    imr_capability = models.TextField(null=True)
    imr_reason = models.TextField(null=True)

class Pchart(models.Model):
    pchart_survey_id = models.IntegerField()
    pchart_sample = models.IntegerField()
    pchart_freq = models.IntegerField()
    pchart_all = models.JSONField(null=True)
    pchart_defect = models.JSONField(null=True)
    pchart_measured = models.TextField()
    pchart_reviewed = models.TextField()
    pchart_reason = models.TextField(null=True)
    pchart_class = models.IntegerField()

class Npchart(models.Model):
    npchart_survey_id = models.IntegerField()
    npchart_sample = models.IntegerField()
    npchart_freq = models.IntegerField()
    npchart_all = models.JSONField(null=True)
    npchart_defect = models.JSONField(null=True)
    npchart_measured = models.TextField()
    npchart_reviewed = models.TextField()
    npchart_reason = models.TextField(null=True)
    npchart_recommendation = models.JSONField(null=True)
    npchart_class = models.IntegerField()

class Uchart(models.Model):
    uchart_survey_id = models.IntegerField()
    uchart_sample = models.IntegerField()
    uchart_freq = models.IntegerField()
    uchart_all = models.JSONField(null=True)
    uchart_defect = models.JSONField(null=True)
    uchart_measured = models.TextField()
    uchart_reviewed = models.TextField()
    uchart_reason = models.TextField(null=True)
    uchart_recommendation = models.JSONField(null=True)
    uchart_class = models.IntegerField()
    uchart_nsample = models.JSONField(null=True)

class Cchart(models.Model):
    cchart_survey_id = models.IntegerField()
    cchart_sample = models.IntegerField()
    cchart_freq = models.IntegerField()
    cchart_all = models.JSONField(null=True)
    cchart_defect = models.JSONField(null=True)
    cchart_measured = models.TextField()
    cchart_reviewed = models.TextField()
    cchart_reason = models.TextField(null=True)
    cchart_recommendation = models.JSONField(null=True)
    cchart_class = models.IntegerField()

class Kendall(models.Model):
    kendall_survey_id = models.IntegerField()
    kendall_nkaryawan = models.IntegerField()
    kendall_npart = models.IntegerField()
    kendall_ntrial = models.IntegerField()
    kendall_karyawan = models.JSONField(null=True)
    kendall_all = models.JSONField(null=True)

class Kappa(models.Model):
    kappa_survey_id = models.IntegerField()
    kappa_nkaryawan = models.IntegerField()
    kappa_npart = models.IntegerField()
    kappa_ntrial = models.IntegerField()
    kappa_karyawan = models.JSONField(null=True)
    kappa_all = models.JSONField(null=True)

class Medianr(models.Model):
    medianr_survey_id = models.IntegerField()
    medianr_subgroup = models.IntegerField()
    medianr_lsl = models.IntegerField()
    medianr_usl = models.IntegerField()
    medianr_all = models.JSONField(null=True)
    medianr_measured = models.TextField()
    medianr_reviewed = models.TextField()
    medianr_reason = models.TextField(null=True)

class Bias(models.Model):
    bias_survey_id = models.IntegerField()
    bias_ntrial = models.IntegerField(null=True)
    bias_master = models.IntegerField(null=True)
    bias_date = models.DateField(null=True)
    bias_res = models.FloatField(null=True)
    bias_ref = models.TextField()
    bias_sn = models.TextField(null=True)
    bias_room = models.TextField(null=True)
    bias_ngauge = models.IntegerField()
    bias_average = models.JSONField(null=True)
    bias_all = models.JSONField(null=True)
    bias_check = models.JSONField(null=True)
    bias_recommendation = models.TextField(null=True)
    bias_reviewed = models.TextField()
    bias_measured = models.TextField()
    bias_ave_measured = models.TextField()
    bias_method = models.TextField()

class Resolusi(models.Model):
    resolusi_survey_id = models.IntegerField()
    resolusi_subgroup = models.IntegerField()
    resolusi_nday = models.IntegerField()
    resolusi_all = models.JSONField(null=True)
    resolusi_reviewed = models.TextField()
    resolusi_measured = models.TextField()
    resolusi_unit = models.TextField()
    resolusi_res = models.FloatField(null=True)
    resolusi_part_info = models.TextField(null=True)
    resolusi_project_date = models.DateField(null=True)
    resolusi_customer = models.TextField(null=True)
    resolusi_part_name = models.TextField(null=True)
    resolusi_part_number = models.TextField(null=True)
    resolusi_process_name = models.TextField(null=True)
    resolusi_character = models.TextField(null=True)
    resolusi_category = models.TextField(null=True)
    resolusi_symbol = models.TextField(null=True)
    resolusi_fmea = models.TextField(null=True)
    resolusi_cpn = models.TextField(null=True)
    resolusi_range_max = models.TextField(null=True)
    resolusi_range_min = models.TextField(null=True)
    resolusi_measurement = models.TextField(null=True)
    resolusi_sn = models.TextField(null=True)
    resolusi_next_cal = models.DateField(null=True)
    resolusi_study_date = models.DateField(null=True)
    resolusi_reason = models.TextField(null=True)
    resolusi_user_id = models.TextField(null=True)

class Stability(models.Model):
    stability_survey_id = models.IntegerField()
    stability_sample = models.IntegerField()
    stability_all = models.JSONField(null=True)
    stability_measured = models.TextField()
    stability_reviewed = models.TextField()
    stability_reference = models.TextField()
    stability_stable = models.TextField()
    stability_gauge = models.TextField()

class Survey(models.Model):
    survey_user_id = models.IntegerField()
    survey_date_project = models.DateField()
    survey_data = models.TextField()
    survey_cust_name = models.TextField()
    survey_part_name = models.TextField()
    survey_part_number = models.TextField()
    survey_character = models.TextField()
    survey_name = models.TextField()
    survey_category = models.TextField()
    survey_sn = models.TextField()
    survey_process_name = models.TextField()
    survey_resolution = models.TextField()
    survey_symbol = models.TextField()
    survey_unit = models.TextField()
    survey_ref = models.TextField()
    survey_next_cal = models.DateField()
    survey_range_max = models.TextField() #text atau float?
    survey_range_min = models.TextField()
    survey_fmea = models.TextField()
    survey_control_plan = models.TextField()
    survey_plan = models.DateField(null=True)
    survey_actual = models.DateField(null=True)
    survey_reason = models.TextField(null=True)
    survey_att_prod_unit = models.TextField(null=True)
    survey_att_qty = models.TextField(null=True)
    survey_att_cat = models.TextField(null=True)
    survey_var_bias_working = models.TextField(null=True)
    survey_var_bias_over = models.TextField(null=True)
    survey_var_variation = models.TextField(null=True)
    survey_var_review = models.TextField(null=True)
    survey_var_part_sample = models.TextField(null=True)
    survey_var_homogen = models.TextField(null=True)
    survey_var_subgroup = models.TextField(null=True)
    survey_var_ave = models.TextField(null=True)
    survey_study = models.JSONField(null=True)
    @property
    def is_past_due(self):
        return date.today() > self.survey_next_cal